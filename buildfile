# Generated by Buildr 1.4.5, change to your liking

# 1.7 JVM is not compatible with the emma that buildr uses
#require 'buildr/java/emma'

# Version number for this release
VERSION_NUMBER = "1.0.0"
# Group identifier for your projects
GROUP = "thumbslug"
COPYRIGHT = ""

# Specify Maven 2.0 remote repositories here, like this:
repositories.remote << "http://mirrors.ibiblio.org/pub/mirrors/maven2/"
repositories.remote << "https://repository.jboss.org/nexus/content/repositories/releases/"
# for oauth
repositories.remote << "http://oauth.googlecode.com/svn/code/maven/"

require 'buildr/checkstyle'
require 'rspec/core/rake_task'

NETTY = transitive 'org.jboss.netty:netty:jar:3.2.6.Final'
LOG4J = 'log4j:log4j:jar:1.2.14'
DAEMON = transitive 'org.kohsuke:akuma:jar:1.7'
OAUTH = transitive 'net.oauth.core:oauth-consumer:jar:20100527'
COMMONSCODEC = 'commons-codec:commons-codec:jar:1.4'

JUNIT = 'junit:junit:jar:4.5'
MOCKITO = 'org.mockito:mockito-all:jar:1.8.5'

desc "The Thumbslug project"
define "thumbslug" do

  project.version = VERSION_NUMBER
  project.group = GROUP
  manifest["Implementation-Vendor"] = COPYRIGHT
  manifest["Main-Class"] = "org.candlepin.thumbslug.Main"
  manifest["Class-Path"] = "/usr/share/java/jna.jar /usr/share/java/netty.jar /usr/share/java/log4j.jar /usr/share/java/commons-codec.jar"
  compile.with [NETTY, LOG4J, DAEMON, OAUTH, COMMONSCODEC]
  test.compile.with [NETTY, LOG4J, DAEMON, OAUTH, COMMONSCODEC]
  test.with [JUNIT, MOCKITO]

  #
  # eclipse settings
  # http://buildr.apache.org/more_stuff.html#eclipse
  #
  eclipse.natures 'org.eclipse.jdt.core.javanature'
  eclipse.builders 'org.eclipse.jdt.core.javabuilder'

  # these need to be removed eventually
  package(:jar).merge(DAEMON).exclude("META-INF/MANIFEST.MF")
  package(:jar).merge(OAUTH).exclude("META-INF/MANIFEST.MF")
  package(:jar).with(:manifest => manifest)
end

task :serve do
    sh "java -jar target/#{GROUP}-#{VERSION_NUMBER}.jar"
end
task :serve => :package


#==========================================================================
# RSpec functional tests
#==========================================================================
RSpec::Core::RakeTask.new do |task|

  # Support optional features env variable, specify the spec files to run
  # without the trailing '_spec.rb'. Specify multiple by separating with ':'.
  # i.e. build spec features=flex_expiry:authorization
  features = ENV['features']
  if not features.nil?
    feature_files = Array.new
    features.split(":").each do |part|
      feature_files << "spec/#{part}_spec.rb"
    end
    task.pattern = feature_files
  end

  #  task.rspec_opts = ["-I#{File.expand_path '../client/ruby/'}"]
  task.rspec_opts = ['-c']
  skipbundler = ENV['skipbundler']
  if not skipbundler.nil?
      task.skip_bundler = true
  end

  # Allow specify only="should do something" to run only a specific
  # test. The text must completely match the contents of your "it" string.
  only_run = ENV['only']
  if not only_run.nil?
    task.rspec_opts << "-e '#{only_run}'"
  end

  dots = ENV['dots']
  if not dots.nil?
    task.rspec_opts << "-fp"
  else
    task.rspec_opts << "-fd"
  end
end
task :spec => :package

# runs the eclipse task to generate the .classpath and .project
# files, then fixes the output.
task :eclipse do
  puts "Fixing eclipse .classpath"
  text = File.read(".classpath")
  tmp = File.new("tmp", "w")
  text = text.gsub(/output="target\/resources"/, "")
  tmp.write(text.gsub(/<\/classpath>/, "  <classpathentry path=\"#{Java.tools_jar}\" kind=\"lib\"\/>"))
  tmp.write("</classpath>")
  tmp.close()
  FileUtils.copy("tmp", ".classpath")
  File.delete("tmp")

 # make the gettext output dir to silence eclipse errors
  mkdir_p("target/generated-source")
end

# fix the coverage reports generated by emma.
# we're adding to the existing emma:html task here
# This is AWESOME!
namespace :emma do
   task :html do
      puts "Fixing emma reports"
      fixemmareports("reports/emma/coverage.html")

      dir = "reports/emma/_files"
      Dir.foreach(dir) do |filename|
          fixemmareports("#{dir}/#{filename}") unless filename == "." || filename == ".."
      end
   end
end

# fixes the html produced by emma
def fixemmareports(filetofix)
      text = File.read(filetofix)
      newstr = ''
      text.each_byte do |c|
         if c != 160 then
             newstr.concat(c)
         else
             newstr.concat('&nbsp;')
         end
      end
      tmp = File.new("tmpreport", "w")
      tmp.write(newstr)
      tmp.close()
      FileUtils.copy("tmpreport", filetofix)
      File.delete("tmpreport")
end
